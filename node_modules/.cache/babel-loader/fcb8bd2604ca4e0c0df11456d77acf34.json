{"ast":null,"code":"var _jsxFileName = \"/Users/mayankkumar/Documents/Filter-Conditions/src/containers/Filters.js\";\nimport React, { Component } from \"react\";\nimport FilterName from \"../components/FilterName\";\nimport Filter from \"../components/Filter\";\nimport { debounce } from \"../helpers/EventUtils\";\nimport \"./Filters.css\";\n\nclass Filters extends Component {\n  constructor(props) {\n    super(props);\n    this.setFilterName = debounce(this.setFilterName.bind(this), 70);\n    this.updateTypeValue = debounce(this.updateTypeValue.bind(this), 70);\n    this.addFilter = this.addFilter.bind(this);\n    this.saveFilters = this.saveFilters.bind(this);\n    this.state = {\n      filterName: \"\",\n      filters: [{\n        id: 1,\n        type: \"number\",\n        value: \"\"\n      }]\n    };\n  }\n\n  setFilterName(filterName) {\n    this.setState({\n      filterName\n    });\n  }\n\n  updateTypeValue(id, type, value) {\n    const filters = this.state.filters;\n    const updatedFilters = filters.map(filter => {\n      if (filter.id === id) {\n        if (type) filter.type = type;\n        if (value !== null) filter.value = value;\n      }\n\n      return filter;\n    });\n    this.setState({\n      filters: updatedFilters\n    });\n  }\n\n  addFilter() {\n    const filters = this.state.filters;\n    const lastId = filters[filters.length - 1].id;\n    filters.push({\n      id: lastId + 1,\n      type: \"number\",\n      value: \"\"\n    });\n    this.setState({\n      filters\n    });\n  }\n\n  saveFilters(ev) {\n    const _this$state = this.state,\n          name = _this$state.filterName,\n          filters = _this$state.filters;\n    const filterConditions = filters.map(filter => {\n      const type = filter.type,\n            value = filter.value;\n      return {\n        type,\n        value\n      };\n    });\n    const savedFilter = {\n      name,\n      filterConditions\n    };\n    console.log(JSON.stringify(savedFilter));\n    alert('Data logged on the console');\n    ev.preventDefault();\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          filterName = _this$state2.filterName,\n          filters = _this$state2.filters;\n    return React.createElement(React.Fragment, null, React.createElement(FilterName, {\n      filterName: filterName,\n      setFilterName: this.setFilterName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      class: \"filter-head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Filter Conditions\"), filters.length > 0 && React.createElement(\"form\", {\n      onSubmit: this.saveFilters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, filters.map(filter => {\n      return React.createElement(Filter, {\n        key: filter.id,\n        filter: filter,\n        updateTypeValue: this.updateTypeValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      });\n    }), React.createElement(\"button\", {\n      id: \"add-btn\",\n      class: \"btn\",\n      onClick: this.addFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"+ Add Filter\"), React.createElement(\"button\", {\n      id: \"save-btn\",\n      class: \"btn\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Save Filters\"))));\n  }\n\n}\n\nexport default Filters;","map":{"version":3,"sources":["/Users/mayankkumar/Documents/Filter-Conditions/src/containers/Filters.js"],"names":["React","Component","FilterName","Filter","debounce","Filters","constructor","props","setFilterName","bind","updateTypeValue","addFilter","saveFilters","state","filterName","filters","id","type","value","setState","updatedFilters","map","filter","lastId","length","push","ev","name","filterConditions","savedFilter","console","log","JSON","stringify","alert","preventDefault","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FilterName from \"../components/FilterName\";\nimport Filter from \"../components/Filter\";\nimport { debounce } from \"../helpers/EventUtils\";\nimport \"./Filters.css\";\n\nclass Filters extends Component {\n  constructor(props) {\n    super(props);\n    this.setFilterName = debounce(this.setFilterName.bind(this), 70);\n    this.updateTypeValue = debounce(this.updateTypeValue.bind(this), 70);\n    this.addFilter = this.addFilter.bind(this);\n    this.saveFilters = this.saveFilters.bind(this);\n    this.state = {\n      filterName: \"\",\n      filters: [\n        {\n          id: 1,\n          type: \"number\",\n          value: \"\"\n        }\n      ]\n    };\n  }\n\n  setFilterName(filterName) {\n    this.setState({ filterName });\n  }\n\n  updateTypeValue(id, type, value) {\n    const { filters } = this.state;\n    const updatedFilters = filters.map(filter => {\n      if (filter.id === id) {\n        if (type) filter.type = type;\n        if (value !== null) filter.value = value;\n      }\n      return filter;\n    });\n    this.setState({ filters: updatedFilters });\n  }\n\n  addFilter() {\n    const { filters } = this.state;\n    const lastId = filters[filters.length - 1].id;\n    filters.push({\n      id: lastId + 1,\n      type: \"number\",\n      value: \"\"\n    });\n    this.setState({ filters });\n  }\n\n  saveFilters(ev) {\n    const { filterName: name, filters } = this.state;\n    const filterConditions = filters.map(filter => {\n      const { type, value } = filter;\n      return {\n        type,\n        value\n      };\n    });\n    const savedFilter = {\n      name,\n      filterConditions\n    };\n    console.log(JSON.stringify(savedFilter));\n    alert('Data logged on the console');\n    ev.preventDefault();\n  }\n\n  render() {\n    const { filterName, filters } = this.state;\n    return (\n      <>\n        <FilterName\n          filterName={filterName}\n          setFilterName={this.setFilterName}\n        />\n        <>\n          <div class=\"filter-head\">Filter Conditions</div>\n          {filters.length > 0 && (\n            <form onSubmit={this.saveFilters}>\n              {filters.map(filter => {\n                return (\n                  <Filter\n                    key={filter.id}\n                    filter={filter}\n                    updateTypeValue={this.updateTypeValue}\n                  />\n                );\n              })}\n              <button id=\"add-btn\" class=\"btn\" onClick={this.addFilter}>+ Add Filter</button>\n              <button id=\"save-btn\" class=\"btn\" type=\"submit\">Save Filters</button>\n            </form>\n          )}\n        </>\n      </>\n    );\n  }\n}\n\nexport default Filters;\n"]},"metadata":{},"sourceType":"module"}